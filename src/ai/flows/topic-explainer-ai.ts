"use server";

import { ai } from "@/ai/genkit";
import { z } from "genkit";

const TopicExplainerInputSchema = z.object({
  topic: z.string().describe("The specific topic to explain."),
  subject: z
    .string()
    .describe("The subject area (e.g., mathematics, physics, chemistry)."),
  step: z
    .enum(["tanitim", "ogrenme", "pekistirme", "uygulama", "degerlendirme"])
    .describe("The learning step to generate content for."),
  difficulty: z
    .enum(["easy", "medium", "hard"])
    .describe("The difficulty level of the content."),
  estimatedTime: z
    .number()
    .describe("Estimated time in minutes for this step."),
});

export type TopicExplainerInput = z.infer<typeof TopicExplainerInputSchema>;

const TopicExplainerOutputSchema = z.object({
  title: z.string().describe("The title for this learning step."),
  content: z.string().describe("The main educational content for this step."),
  examples: z.array(z.string()).describe("Relevant examples for this step."),
  tips: z.array(z.string()).describe("Learning tips for this step."),
  visualDescription: z
    .string()
    .describe("Description for AI-generated visual aid."),
  confidence: z
    .number()
    .describe("AI confidence in the generated content (0-1)."),
});

export type TopicExplainerOutput = z.infer<typeof TopicExplainerOutputSchema>;

export async function generateTopicStepContent(
  input: TopicExplainerInput,
): Promise<TopicExplainerOutput> {
  try {
    return await topicExplainerFlow(input);
  } catch {
    // Return fallback content
    return {
      title: `${input.topic} ${
        input.step === "tanitim"
          ? "TanÄ±tÄ±m"
          : input.step === "ogrenme"
            ? "Ã–ÄŸrenme"
            : input.step === "pekistirme"
              ? "PekiÅŸtirme"
              : input.step === "uygulama"
                ? "Uygulama"
                : "DeÄŸerlendirme"
      }`,
      content: `${input.topic} konusunun ${input.step} aÅŸamasÄ±nda Ã¶ÄŸrenilmesi gereken temel kavramlar ve uygulamalar.`,
      examples: [
        `${input.topic} konusunun gÃ¼nlÃ¼k hayattaki uygulamalarÄ±`,
        `${input.topic} ile ilgili temel kavramlar`,
        `${input.topic} konusunun diÄŸer konularla iliÅŸkisi`,
      ],
      tips: [
        `${input.topic} konusunu adÄ±m adÄ±m Ã¶ÄŸrenin`,
        "Her kavramÄ± tam anlamadan geÃ§meyin",
        "Bol bol pratik yapÄ±n",
      ],
      visualDescription: `${input.topic} konusu iÃ§in gÃ¶rsel yardÄ±mcÄ±`,
      confidence: 0.3,
    };
  }
}

const prompt = ai.definePrompt({
  name: "topicExplainerPrompt",
  input: { schema: TopicExplainerInputSchema },
  output: { schema: TopicExplainerOutputSchema },
  prompt: `Sen bir uzman eÄŸitimcisin. Ã–ÄŸrencilere konularÄ± adÄ±m adÄ±m Ã¶ÄŸretmek iÃ§in AI destekli iÃ§erik Ã¼retiyorsun.

KONU: {{{topic}}}
DERS: {{{subject}}}
ADIM: {{{step}}}
ZORLUK: {{{difficulty}}}
TAHMINÄ° SÃœRE: {{{estimatedTime}}} dakika

## GÃ–REVÄ°N:

### ADIM TÃœRLERÄ°:
- **tanitim**: Konuya giriÅŸ ve motivasyon - "Bu konuyu neden Ã¶ÄŸreniyoruz?"
- **ogrenme**: Ana kavramlarÄ± Ã¶ÄŸrenme - "Temel bilgileri Ã¶ÄŸrenelim"
- **pekistirme**: KavramlarÄ± pekiÅŸtirme - "Ã–ÄŸrendiklerimizi saÄŸlamlaÅŸtÄ±ralÄ±m"
- **uygulama**: Basit uygulamalar - "Ã–ÄŸrendiklerimizi kullanalÄ±m"
- **degerlendirme**: Ã–ÄŸrendiklerini test etme - "Ne kadar Ã¶ÄŸrendik?"

### ZORLUK SEVÄ°YELERÄ°:
- **easy**: Temel kavramlar, basit Ã¶rnekler
- **medium**: Orta seviye uygulamalar, problem Ã§Ã¶zme
- **hard**: Ä°leri seviye, karmaÅŸÄ±k senaryolar

## Ã‡IKTI FORMATI:

### BAÅžLIK:
- AdÄ±m tÃ¼rÃ¼ne uygun, aÃ§Ä±klayÄ±cÄ± baÅŸlÄ±k
- Ã–rnek: "Matematik Temel KavramlarÄ± TanÄ±tÄ±m", "Geometri Ã–ÄŸrenme"

### Ä°Ã‡ERÄ°K (MARKDOWN FORMATINDA):
- Konuya Ã¶zel, detaylÄ± aÃ§Ä±klama
- Ã–ÄŸrenci seviyesine uygun dil
- Pratik Ã¶rneklerle desteklenmiÅŸ
- Motivasyonu artÄ±ran yaklaÅŸÄ±m
- **Markdown formatÄ±nda yaz:**
  - \`#\` baÅŸlÄ±klar iÃ§in
  - \`**kalÄ±n**\` Ã¶nemli kavramlar iÃ§in
  - \`*italik*\` vurgu iÃ§in
  - \`\`\` kod bloklarÄ± iÃ§in
  - \`-\` liste maddeleri iÃ§in
  - \`>\` alÄ±ntÄ±lar iÃ§in

### Ã–RNEKLER (3-5 adet):
- Konuya Ã¶zel, gÃ¼ncel Ã¶rnekler
- FarklÄ± zorluk seviyelerinde
- GerÃ§ek hayat uygulamalarÄ±
- **Markdown formatÄ±nda yaz:**
  - \`**Ã–rnek 1:**\` ÅŸeklinde baÅŸlÄ±k
  - AÃ§Ä±klama ve detaylar
  - Kod Ã¶rnekleri iÃ§in \`\`\` kullan

### Ä°PUÃ‡LARI (3-5 adet):
- Ã–ÄŸrenme stratejileri
- SÄ±k yapÄ±lan hatalar
- Etkili Ã§alÄ±ÅŸma yÃ¶ntemleri
- **Markdown formatÄ±nda yaz:**
  - \`**ðŸ’¡ Ä°pucu:**\` ÅŸeklinde baÅŸlÄ±k
  - AÃ§Ä±klama ve detaylar

### GÃ–RSEL AÃ‡IKLAMA:
- AI tarafÄ±ndan Ã¼retilecek gÃ¶rsel iÃ§in aÃ§Ä±klama
- Konuya Ã¶zel, anlaÅŸÄ±lÄ±r
- MUTLAKA konuya Ã¶zel semboller, logolar, elementler iÃ§ermeli
- Generic gÃ¶rsel olmamalÄ±, spesifik olmalÄ±
- Ã–rnek: "Python logosunun bulunduÄŸu, bir yÄ±lan figÃ¼rÃ¼nÃ¼n kod satÄ±rlarÄ± arasÄ±nda kÄ±vrÄ±ldÄ±ÄŸÄ±, modern ve teknolojik bir gÃ¶rsel"
- Ã–rnek: "Matematik sembollerinin (toplama, Ã§Ä±karma, Ã§arpma, bÃ¶lme) renkli ve eÄŸlenceli bir ÅŸekilde gÃ¶sterildiÄŸi, etrafÄ±nda sayÄ±lar ve geometrik ÅŸekillerin uÃ§uÅŸtuÄŸu bir gÃ¶rsel"
- Ã–rnek: "Trigonometri sembollerinin (sin, cos, tan) ve birim Ã§emberin merkezde yer aldÄ±ÄŸÄ±, aÃ§Ä±larÄ±n ve trigonometrik fonksiyonlarÄ±n gÃ¶rsel olarak gÃ¶sterildiÄŸi eÄŸitimsel bir diyagram"

## Ã–NEMLÄ° KURALLAR:
- TÃ¼rkÃ§e iÃ§erik Ã¼ret
- Ã–ÄŸrenci dostu dil kullan
- Konuya Ã¶zel, dinamik iÃ§erik
- Motivasyonu artÄ±r
- Pratik odaklÄ± yaklaÅŸÄ±m
- Zorluk seviyesine uygun

Åžimdi bu konu iÃ§in AI destekli iÃ§erik Ã¼ret!`,
});

const topicExplainerFlow = ai.defineFlow(
  {
    name: "topicExplainerFlow",
    inputSchema: TopicExplainerInputSchema,
    outputSchema: TopicExplainerOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  },
);
